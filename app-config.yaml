app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    #client: better-sqlite3
    #connection: ':memory:'
    client: pg
    connection:
      host: 127.0.0.1
      port: 5432
      user: postgres
      password: backstage
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: 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
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}
  awsS3:
    - accessKeyId: AKIA3LET5SCIEBNY2Q5O
      secretAccessKey: ZbTXk+XPl2ThMlzUnOTLaq/OvviQEu8b0cY2NyP5
  gitlab:
    - host: gitlab.com
      token: glpat-ua5LYoad1H3YC2EV5g6s

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}
    github:
      development:
        clientId: Ov23liMqbQhZSntHDs5f
        clientSecret: 7d809df3486437ba4172a83a8f62c44931b6c2e9
        signIn:
          resolvers:
            # Matches the GitHub username with the Backstage user entity name.
            # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers.
            - resolver: usernameMatchingUserEntityName
    microsoft:
      development:
        clientId: 9a4e3240-80c1-4a28-8093-8abcf23ed731
        clientSecret: 9cab6a7b-a268-421a-b981-b1d13d3f797f
        tenantId: bff4886d-3d79-4b37-a72a-999a17b680f2
        domainHint: ''
        additionalScopes:
          - Mail.Send
        signIn:
          resolvers:
            # typically you would pick one of these
            - resolver: usernameMatchingUserEntityName
    gitlab:
      development:
        clientId: 85ef428c303789962c216ae0307a71cd235416a30cc9d06bd3b379a7c2cbf5ed
        clientSecret: gloas-460fc3b0c97e18b4ba19a660fb064bbcfc5ffe59170bd6d13c26747aba5e1ccc
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: zeeshanAliMedlari # Defaults to `Scaffolder`
    email: zeeshanmedlari@icloud.com # Defaults to `scaffolder@backstage.io`
  defaultCommitMessage: "U can't touch this" # Defaults to 'Initial commit'

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  providers:
    kubernetes:
      local-cluster:
        cluster: Backstage_Cluster
        processor:
          namespaceOverride: default
          defaultOwner: guests
        schedule:
          frequency:
            seconds: 30
          timeout:
            seconds: 5
    awsS3:
      yourProviderId: # identifies your dataset / provider independent of config changes
        bucketName: my-ews-bucket005
        prefix: prefix/ # optional
        region: us-east-2 # optional, uses the default region otherwise
        schedule: # same options as in SchedulerServiceTaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 30 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }

  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
      rules:
        - allow: [User, Group]

    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: template.yaml # Backstage will expect the file to be in packages/backend/template.yaml

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options
  serviceLocatorMethod:
    type: multiTenant
  clusterLocatorMethods:
    - type: config
      clusters:
        - name: Backstage_Cluster
          url: https://2B5CA22BEC81C7499BC548FBFF1888AC.gr7.us-west-1.eks.amazonaws.com
          authProvider: aws # Other options: google, aws, oidc, etc.
          kubeConfig: /root/.kube/config # Path to your kubeconfig file (if using kubeconfig)

        - name: gitlab-cluster
          url: gitlab-cluster-dns-dse48hu4.hcp.westus.azmk8s.io
          authProvider: azure
          skipTLSVerify: true  

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
